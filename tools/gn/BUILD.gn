# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

defines = [ "GN_BUILD" ]

static_library("gn_lib") {
  configs += [ "//build/config:precompiled_headers" ]

  sources = [
    "action_target_generator.cc",
    "action_values.cc",
    "analyzer.cc",
    "args.cc",
    "binary_target_generator.cc",
    "builder.cc",
    "builder_record.cc",
    "build_settings.cc",
    "bundle_data.cc",
    "bundle_data_target_generator.cc",
    "bundle_file_rule.cc",
    "c_include_iterator.cc",
    "command_analyze.cc",
    "command_args.cc",
    "command_check.cc",
    "command_clean.cc",
    "command_desc.cc",
    "command_format.cc",
    "command_gen.cc",
    "command_help.cc",
    "command_meta.cc",
    "command_ls.cc",
    "command_path.cc",
    "command_refs.cc",
    "commands.cc",
    "compile_commands_writer.cc",
    "config.cc",
    "config_values.cc",
    "config_values_extractors.cc",
    "config_values_generator.cc",
    "copy_target_generator.cc",
    "create_bundle_target_generator.cc",
    "deps_iterator.cc",
    "desc_builder.cc",
    "eclipse_writer.cc",
    "err.cc",
    "escape.cc",
    "exec_process.cc",
    "filesystem_utils.cc",
    "function_exec_script.cc",
    "function_foreach.cc",
    "function_forward_variables_from.cc",
    "function_get_label_info.cc",
    "function_get_path_info.cc",
    "function_get_target_outputs.cc",
    "function_mark_used.cc",
    "function_mark_used_from.cc",
    "function_process_file_template.cc",
    "function_read_file.cc",
    "function_rebase_path.cc",
    "functions.cc",
    "function_set_defaults.cc",
    "function_set_default_toolchain.cc",
    "functions_target.cc",
    "function_template.cc",
    "function_toolchain.cc",
    "function_write_file.cc",
    "generated_file_target_generator.cc",
    "group_target_generator.cc",
    "header_checker.cc",
    "import_manager.cc",
    "inherited_libraries.cc",
    "input_conversion.cc",
    "input_file.cc",
    "input_file_manager.cc",
    "item.cc",
    "json_project_writer.cc",
    "label.cc",
    "label_pattern.cc",
    "lib_file.cc",
    "loader.cc",
    "location.cc",
    "metadata.cc",
    "metadata_walk.cc",
    "ninja_action_target_writer.cc",
    "ninja_binary_target_writer.cc",
    "ninja_build_writer.cc",
    "ninja_bundle_data_target_writer.cc",
    "ninja_copy_target_writer.cc",
    "ninja_create_bundle_target_writer.cc",
    "ninja_generated_file_target_writer.cc",
    "ninja_group_target_writer.cc",
    "ninja_target_command_util.cc",
    "ninja_target_writer.cc",
    "ninja_toolchain_writer.cc",
    "ninja_utils.cc",
    "ninja_writer.cc",
    "operators.cc",
    "output_conversion.cc",
    "output_file.cc",
    "parse_node_value_adapter.cc",
    "parser.cc",
    "parse_tree.cc",
    "path_output.cc",
    "pattern.cc",
    "pool.cc",
    "qt_creator_writer.cc",
    "runtime_deps.cc",
    "scheduler.cc",
    "scope.cc",
    "scope_per_file_provider.cc",
    "settings.cc",
    "setup.cc",
    "source_dir.cc",
    "source_file.cc",
    "source_file_type.cc",
    "standard_out.cc",
    "string_utils.cc",
    "substitution_list.cc",
    "substitution_pattern.cc",
    "substitution_type.cc",
    "substitution_writer.cc",
    "switches.cc",
    "target.cc",
    "target_generator.cc",
    "template.cc",
    "token.cc",
    "tokenizer.cc",
    "tool.cc",
    "toolchain.cc",
    "trace.cc",
    "value.cc",
    "value_extractors.cc",
    "variables.cc",
    "visibility.cc",
    "visual_studio_utils.cc",
    "visual_studio_writer.cc",
    "xcode_object.cc",
    "xcode_writer.cc",
    "xml_element_writer.cc",
    "//util/exe_path.cc",
    "//util/msg_loop.cc",
    "//util/semaphore.cc",
    "//util/sys_info.cc",
    "//util/ticks.cc",
    "//util/worker_pool.cc",
  ]

  deps = [
    "//base",
    ":last_commit_position",
  ]
}

action("last_commit_position") {
  script = "//build/last_commit_position.py"

  version = getenv("GN_VERSION")
  if (version == "") {
    head = exec_script("//build/util/githead.py",
                       [ rebase_path("//.git/HEAD", root_build_dir) ],
                       "trim string",
                       ["//.git/HEAD"])
    # This dependency forces a re-run when the code is synced.
    inputs = [
      "//.git/HEAD",
    ]
    if (head != "") {
      inputs += [ "//.git/$head" ]
    }
    args = [
      "--git-dir", rebase_path("//", root_build_dir),
    ]
  } else {
    args = [
      "--version", version,
    ]
  }

  outfile = "$target_gen_dir/last_commit_position.h"
  outputs = [
    outfile,
  ]

  args += [
    "--outfile", rebase_path(outfile, root_build_dir),
    "--header-guard", "TOOLS_GN_LAST_COMMIT_POSITION_H_",
  ]
}

# Note for Windows debugging: GN is super-multithreaded and uses a lot of STL.
# Iterator debugging on Windows does locking for every access, which ends up
# slowing down debug runtime from 0:36 to 9:40. If you want to run debug builds
# of GN over the large Chrome build, you will want to set the arg:
#   enable_iterator_debugging = false
executable("gn") {
  configs += [ "//build/config/gn:executable_config" ]

  sources = [
    "gn_main.cc",
  ]

  deps = [
    ":gn_lib",
    ":last_commit_position",
    "//base",
  ]

  include_dirs = [ target_gen_dir ]
}

executable("gn_unittests") {
  configs += [ "//build/config/gn:executable_config" ]

  sources = [
    "action_target_generator_unittest.cc",
    "analyzer_unittest.cc",
    "args_unittest.cc",
    "builder_unittest.cc",
    "c_include_iterator_unittest.cc",
    "command_format_unittest.cc",
    "compile_commands_writer_unittest.cc",
    "config_unittest.cc",
    "config_values_extractors_unittest.cc",
    "escape_unittest.cc",
    "exec_process_unittest.cc",
    "filesystem_utils_unittest.cc",
    "function_foreach_unittest.cc",
    "function_forward_variables_from_unittest.cc",
    "function_get_label_info_unittest.cc",
    "function_get_path_info_unittest.cc",
    "function_get_target_outputs_unittest.cc",
    "function_process_file_template_unittest.cc",
    "function_rebase_path_unittest.cc",
    "function_template_unittest.cc",
    "function_toolchain_unittest.cc",
    "function_write_file_unittest.cc",
    "functions_target_unittest.cc",
    "functions_unittest.cc",
    "header_checker_unittest.cc",
    "inherited_libraries_unittest.cc",
    "input_conversion_unittest.cc",
    "label_pattern_unittest.cc",
    "label_unittest.cc",
    "loader_unittest.cc",
    "metadata_unittest.cc",
    "metadata_walk_unittest.cc",
    "ninja_action_target_writer_unittest.cc",
    "ninja_binary_target_writer_unittest.cc",
    "ninja_build_writer_unittest.cc",
    "ninja_bundle_data_target_writer_unittest.cc",
    "ninja_copy_target_writer_unittest.cc",
    "ninja_create_bundle_target_writer_unittest.cc",
    "ninja_generated_file_target_writer_unittest.cc",
    "ninja_group_target_writer_unittest.cc",
    "ninja_target_writer_unittest.cc",
    "ninja_toolchain_writer_unittest.cc",
    "operators_unittest.cc",
    "output_conversion_unittest.cc",
    "parse_tree_unittest.cc",
    "parser_unittest.cc",
    "path_output_unittest.cc",
    "pattern_unittest.cc",
    "runtime_deps_unittest.cc",
    "scope_per_file_provider_unittest.cc",
    "scope_unittest.cc",
    "setup_unittest.cc",
    "source_dir_unittest.cc",
    "source_file_unittest.cc",
    "string_utils_unittest.cc",
    "substitution_pattern_unittest.cc",
    "substitution_writer_unittest.cc",
    "target_unittest.cc",
    "template_unittest.cc",
    "test_with_scheduler.cc",
    "test_with_scope.cc",
    "tokenizer_unittest.cc",
    "unique_vector_unittest.cc",
    "value_unittest.cc",
    "visibility_unittest.cc",
    "visual_studio_utils_unittest.cc",
    "visual_studio_writer_unittest.cc",
    "xcode_object_unittest.cc",
    "xml_element_writer_unittest.cc",
    "//util/test/gn_test.cc",
  ]

  data = [
    "format_test_data/",
  ]

  deps = [
    ":gn_lib",
  ]
}

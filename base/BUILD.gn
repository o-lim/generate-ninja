# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# HOW TO WRITE CONDITIONALS IN THIS FILE
# ======================================
#
# In many other places, one would write a conditional that expresses all the
# cases when a source file is used or unused, and then either add or subtract
# it from the sources list in that case
#
# Since base includes so many low-level things that vary widely and
# unpredictably for the various build types, we prefer a slightly different
# style. Instead, there are big per-platform blocks of inclusions and
# exclusions. If a given file has an inclusion or exclusion rule that applies
# for multiple conditions, prefer to duplicate it in both lists. This makes it
# a bit easier to see which files apply in which cases rather than having a
# huge sequence of random-looking conditionals.

import("//build/config/compiler/compiler.gni")
import("//build/config/clang/clang.gni")
import("//build/config/sysroot.gni")

declare_args() {
  # Override this value to give a specific build date.
  # See //base/build_time.cc and //build/write_build_date_header.py for more
  # details and the expected format.
  override_build_date = "N/A"

  # Partition alloc is included by default except iOS.
  use_partition_alloc = !is_ios

  # Indicates if the Location object contains the source code information
  # (file, function, line). False means only the program counter (and currently
  # file name) is saved.
  enable_location_source = true

  # Unsafe developer build. Has developer-friendly features that may weaken or
  # disable security measures like sandboxing or ASLR.
  # IMPORTANT: Unsafe developer builds should never be distributed to end users.
  is_unsafe_developer_build = !is_official_build
}

config("base_flags") {
  if (is_win) {
    cflags = []
  } else {
    cflags = [ "-Wno-unused-function" ]
  }
  if (is_mac && use_xcode_clang && xcode_version_int < 830) {
    cflags += [ "-Wno-unknown-pragmas" ]
  }
  if (is_clang) {
    cflags += [ "-Wno-unused-private-field" ]
  }
}

if (is_android) {
  config("android_system_libs") {
    libs = [ "log" ]  # Used by logging.cc.
  }
}

# Base and everything it depends on should be a static library rather than
# a source set. Base is more of a "library" in the classic sense in that many
# small parts of it are used in many different contexts. This combined with a
# few static initializers floating around means that dead code stripping
# still leaves a lot of code behind that isn't always used. For example, this
# saves more than 40K for a smaller target like chrome_elf.
#
# Use static libraries for the helper stuff as well like //base/debug since
# those things refer back to base code, which will force base compilation units
# to be linked in where they wouldn't have otherwise. This does not include
# test code (test support and anything in the test directory) which should use
# source_set as is recommended for GN targets).
static_library("base") {
  sources = [
    "callback_internal.cc",
    "command_line.cc",
    "environment.cc",
    "files/file.cc",
    "files/file_enumerator.cc",
    "files/file_path.cc",
    "files/file_path_constants.cc",
    "files/file_util.cc",
    "files/scoped_file.cc",
    "files/scoped_temp_dir.cc",
    "json/json_parser.cc",
    "json/json_reader.cc",
    "json/json_writer.cc",
    "json/string_escape.cc",
    "logging.cc",
    "md5.cc",
    "memory/ref_counted.cc",
    "memory/weak_ptr.cc",
    "sha1.cc",
    "strings/string_number_conversions.cc",
    "strings/string_piece.cc",
    "strings/string_split.cc",
    "strings/string_util.cc",
    "strings/string_util_constants.cc",
    "strings/stringprintf.cc",
    "strings/utf_string_conversion_utils.cc",
    "strings/utf_string_conversions.cc",
    "third_party/icu/icu_utf.cc",
    "timer/elapsed_timer.cc",
    "value_iterators.cc",
    "values.cc",
  ]

  libs = []

  if (is_posix) {
    sources += [
      "files/file_enumerator_posix.cc",
      "files/file_posix.cc",
      "files/file_util_posix.cc",
      "posix/file_descriptor_shuffle.cc",
      "posix/safe_strerror.cc",
      "strings/string16.cc",
    ]
  }

  if (is_linux) {
    sources += [ "memcpy_linux.cc" ]
  }

  if (is_win) {
    sources += [
      "files/file_enumerator_win.cc",
      "files/file_util_win.cc",
      "files/file_win.cc",
      "win/registry.cc",
      "win/scoped_handle.cc",
      "win/scoped_process_information.cc",
    ]

    libs += [
      "advapi32.lib",
      "dbghelp.lib",
      "kernel32.lib",
      "ole32.lib",
      "shell32.lib",
      "user32.lib",
      "userenv.lib",
      "version.lib",
      "winmm.lib",
      "ws2_32.lib",
      "Shlwapi.lib",
    ]
  }

  all_dependent_configs = []
  defines = []
  data = []

  configs += [
    ":base_flags",
    "//build/config:precompiled_headers",
  ]

  configs += [ "//build/config/compiler:wexit_time_destructors" ]
  if (!is_debug) {
    configs -= [ "//build/config/compiler:default_optimization" ]
    configs += [ "//build/config/compiler:optimize_max" ]
  }
}
